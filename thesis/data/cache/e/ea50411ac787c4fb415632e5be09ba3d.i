a:143:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"FIPA tools for Repast";i:1;i:2;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"I will use this page to document the implementation of ";}i:2;i:36;}i:5;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"FIPA";}i:2;i:91;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" protocols in Repast, which I will call ";}i:2;i:95;}i:7;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:135;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"RepACL";}i:2;i:137;}i:9;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:143;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" for now. Some issues I've been thinking about:";}i:2;i:145;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:193;}i:12;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:193;}i:13;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:193;}i:14;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:193;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:310:" Should a directory facilitator be created? Or just use direct agent references - since agents in Repast are POJO? The DF would probably only introduce more complexity to the simulation. Besides, many Repast applications use spaces that contain the agents. If a DF is needed, it should be up to the programmer.";}i:2;i:197;}i:16;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:507;}i:17;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:507;}i:18;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:507;}i:19;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:507;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" Repast ";}i:2;i:511;}i:21;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"MABS";}i:2;i:519;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" are typically very fast so it's important to keep the library very lightweight. ";}i:2;i:523;}i:23;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"JADE";}i:2;i:604;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" uses behaviours to implement each type of communication. These behaviours are classes. For RepACL";}i:2;i:608;}i:25;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:706;}i:26;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:706;}i:27;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:706;}i:28;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:706;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" Different kinds of communication are available in ";}i:2;i:710;}i:30;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"JADE";}i:2;i:761;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:": REQUEST, PROPOSE, CONTRACT NET.";}i:2;i:765;}i:32;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:798;}i:33;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:798;}i:34;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:798;}i:35;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:800;}i:36;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"RepACL Architecture";i:1;i:3;i:2;i:800;}i:2;i:800;}i:37;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:800;}i:38;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:800;}i:39;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:24:":wiki:repacl_arch_v3.png";i:1;s:0:"";i:2;s:5:"right";i:3;s:3:"200";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:830;}i:40;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:864;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:864;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"After creating multiple drafts of RepACL's architecture, I decided to keep it lightweight. There were three main possibilities for the architecture.";}i:2;i:866;}i:43;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1015;}i:44;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:5;i:1;i:4;i:2;i:1016;}i:2;i:1015;}i:45;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1015;}i:46;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1015;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"   ";}i:2;i:1017;}i:48;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1020;}i:49;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1020;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Implementation ";}i:2;i:1021;}i:51;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1037;}i:52;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1037;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" Agent super classes allowed ";}i:2;i:1038;}i:54;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1067;}i:55;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1067;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" Extra code in agent class ";}i:2;i:1068;}i:57;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1095;}i:58;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1095;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" Sync ";}i:2;i:1096;}i:60;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1102;}i:61;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1103;}i:62;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1103;}i:63;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1103;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" Interface ";}i:2;i:1105;}i:65;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1116;}i:66;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1116;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" none ";}i:2;i:1117;}i:68;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1123;}i:69;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1123;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" yes ";}i:2;i:1124;}i:71;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1129;}i:72;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1129;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" all implementation ";}i:2;i:1130;}i:74;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1150;}i:75;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1150;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" yes ";}i:2;i:1151;}i:77;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1156;}i:78;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1157;}i:79;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1157;}i:80;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1157;}i:81;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Abstract class ";}i:2;i:1159;}i:82;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1175;}i:83;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1175;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" yes ";}i:2;i:1176;}i:85;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1181;}i:86;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1181;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" no ";}i:2;i:1182;}i:88;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1186;}i:89;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1186;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" some implementation ";}i:2;i:1187;}i:91;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1208;}i:92;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1208;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" yes ";}i:2;i:1209;}i:94;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1214;}i:95;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1215;}i:96;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1215;}i:97;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1215;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Separate class ";}i:2;i:1217;}i:99;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1233;}i:100;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1233;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" yes ";}i:2;i:1234;}i:102;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1239;}i:103;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1239;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" yes ";}i:2;i:1240;}i:105;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1245;}i:106;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1245;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" just method calls ";}i:2;i:1246;}i:108;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1265;}i:109;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:1265;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" possible ";}i:2;i:1266;}i:111;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1276;}i:112;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1277;}i:113;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:1277;}i:2;i:1277;}i:114;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1277;}i:115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:255:"Having the agents extend of implement RepACL would be very straightforward, simple and flexible. However, using an abstract class prevents agents that extend it to extends their own super classes. On the other hand, using an interface means that there is ";}i:2;i:1279;}i:116;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1534;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"no implementation whatsoever";}i:2;i:1536;}i:118;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:1564;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:", i.e. it's up to the agent to implement all protocols.";}i:2;i:1566;}i:120;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1621;}i:121;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1621;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"I decided to use a ";}i:2;i:1623;}i:123;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1642;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"communicator class";}i:2;i:1643;}i:125;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1661;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:" that contains static methods that receive all messages and keep them in a queue. Each kind of communication (Request, Propose, Contract Net) will deal with the ";}i:2;i:1662;}i:127;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"ACL";}i:2;i:1823;}i:128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:" Messages in a different way. This class uses a message queue and it should work just like any other repast agent, executing its ";}i:2;i:1826;}i:129;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:1955;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"step()";}i:2;i:1957;}i:131;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:1963;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" function on each tick. The step method will send all messages currently in the buffer.";}i:2;i:1965;}i:133;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2052;}i:134;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2052;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"The ACLMessage class contains all the information about the message: the agents involved, the performative (the ";}i:2;i:2054;}i:136;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2166;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"intent";}i:2;i:2167;}i:138;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2173;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" of the message), and the content, which can be any object or null. ";}i:2;i:2174;}i:140;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2242;}i:141;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2245;}i:142;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:2245;}}